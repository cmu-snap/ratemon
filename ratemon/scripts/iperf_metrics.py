#!/usr/bin/env python3
"""
Parses iperf3 sender-side JSON output file generated by cctestbedv2.py.
"""

import argparse
import json
import sys


def parse_args():
    parser = argparse.ArgumentParser(
        description=(
            "Parse iperf3 sender JSON log file to determine "
            "average throughput, retransmission count, and CPU utilization."
        )
    )
    parser.add_argument(
        "--in-file",
        type=str,
        help="Input JSON file (output of iperf3 sender).",
        required=True,
    )
    parser.add_argument("--out-file", type=str, help="Output file.", required=True)
    return parser.parse_args()


def main(args):
    with open(args.in_file, "r", encoding="utf-8") as fil:
        res = json.load(fil)

    if "end" not in res:
        print(f"Error: 'end' key not found in JSON file: {args.in_file}")
        return 1

    bps = res["end"]["sum_received"]["bits_per_second"]
    rxmits_per_sec = res["end"]["sum_sent"]["retransmits"] / (
        res["end"]["sum_sent"]["end"] - res["end"]["sum_sent"]["start"]
    )
    sender_cpu_total = res["end"]["cpu_utilization_percent"]["host_total"]
    sender_cpu_user = res["end"]["cpu_utilization_percent"]["host_user"]
    sender_cpu_system = res["end"]["cpu_utilization_percent"]["host_system"]
    receiver_cpu_total = res["end"]["cpu_utilization_percent"]["remote_total"]
    receiver_cpu_user = res["end"]["cpu_utilization_percent"]["remote_user"]
    receiver_cpu_system = res["end"]["cpu_utilization_percent"]["remote_system"]

    msg = (
        f"throughput (Gbps):{bps / 1e9:.2f}\n"
        f"retransmits (per second):{rxmits_per_sec:.2f}\n"
        f"sender cpu total (%):{sender_cpu_total:.2f}\n"
        f"sender cpu user (%):{sender_cpu_user:.2f}\n"
        f"sender cpu system (%):{sender_cpu_system:.2f}\n"
        f"receiver cpu total (%):{receiver_cpu_total:.2f}\n"
        f"receiver cpu user (%):{receiver_cpu_user:.2f}\n"
        f"receiver cpu system (%):{receiver_cpu_system:.2f}"
    )
    print(msg)
    with open(args.out_file, "w", encoding="utf-8") as fil:
        fil.write(msg)
    return 0


if __name__ == "__main__":
    sys.exit(main(parse_args()))
